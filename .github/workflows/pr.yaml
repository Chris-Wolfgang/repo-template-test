name: PR Checks

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Download JetBrains dotCover CLI
        shell: pwsh
        run: |
          $DOTCOVER_VERSION = "2025.2.0.1"
          $url = "https://download.jetbrains.com/resharper/dotUltimate.$DOTCOVER_VERSION/JetBrains.dotCover.CommandLineTools.$DOTCOVER_VERSION.zip"
          Invoke-WebRequest $url -OutFile dotcover.zip
          Expand-Archive dotcover.zip -DestinationPath dotcover

      - name: Find solution and all src projects, and build dotCover filters
        id: detect
        shell: pwsh
        run: |
          # Find solution file
          $sln = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
          if (-not $sln) {
            Write-Error "❌ No solution file (*.sln) found in the repository root or subdirectories!"
            exit 1
          }
          Write-Host "=== Found solution: $($sln.FullName)"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "solution_path=$($sln.FullName)"

          Write-Host "=== Listing all production projects under /src ==="
          Get-ChildItem -Recurse -Filter *.csproj -Path .\src | % { $_.FullName } | Sort-Object | Set-Content src_projects.lst
          Get-Content src_projects.lst
          if (!(Get-Content src_projects.lst)) {
            Write-Error "❌ No production projects found in /src!"
            exit 1
          }

          # Build dotCover filters for all src projects
          $filters = (Get-Content src_projects.lst | ForEach-Object { [System.IO.Path]::GetFileNameWithoutExtension($_) } | ForEach-Object { "+:$($_)*;" }) -join ""
          $filters = $filters.TrimEnd(";")
          Write-Host "Filters string: $filters"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "filters=$filters"
          $src_names = (Get-Content src_projects.lst | ForEach-Object { [System.IO.Path]::GetFileNameWithoutExtension($_) }) -join " "
          Add-Content -Path $env:GITHUB_OUTPUT -Value "src_names=$src_names"

      - name: Run solution tests with dotCover
        shell: pwsh
        run: |
          $filters = "${{ steps.detect.outputs.filters }}"
          $sln = "${{ steps.detect.outputs.solution_path }}"
          $dotcoverExe = Join-Path dotcover 'JetBrains.dotCover.Console.Runner.exe'
          $report = "dotCoverReport.xml"
          Write-Host "=== Running dotCover for solution: $sln ==="
          & $dotcoverExe cover `
            --TargetExecutable="dotnet.exe" `
            --TargetArguments="test `"$sln`" --no-build --configuration Release" `
            --ReportType=DetailedXML `
            --Output=$report `
            --WorkingDir="${PWD}" `
            --Filters="$filters"
          Write-Host "=== First 40 lines of $report ==="
          Get-Content $report -TotalCount 40

      - name: Check code coverage for each production project (fail if any <80%)
        shell: pwsh
        run: |
          $src_names = "${{ steps.detect.outputs.src_names }}"
          $report = "dotCoverReport.xml"
          $fail = 0

          Write-Host "=== Per-project coverage check ==="
          foreach ($name in $src_names.Split(" ")) {
            $pct = Select-String -Path $report -Pattern "<Assembly name=`"$name`" CoveragePercent=`"\d+" | ForEach-Object {
              if ($_ -match 'CoveragePercent="(\d+)"') { $matches[1] }
            }
            Write-Host "  Project: $name  Coverage: $($pct ?? 'N/A')%"
            if (-not $pct) {
              Write-Host "❌ Could not find coverage for $name in $report"
              $fail = 1
            } elseif ([int]$pct -lt 80) {
              Write-Host "❌ Coverage for $name is below 80% ($pct%)"
              $fail = 1
            } else {
              Write-Host "✅ Coverage for $name is at least 80% ($pct%)"
            }
          }
          if ($fail -ne 0) {
            Write-Error "❌ One or more production projects are below 80% code coverage."
            exit 1
          }
          Write-Host "✅ All production projects in /src are at least 80% covered."

      - name: Upload dotCover XML report and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotCoverReportAndLogs
          path: |
            dotCoverReport.xml
            src_projects.lst
