name: PR Checks

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution (Release)
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests and Collect Coverage for Each Test Project (Release)
        run: |
          find ./tests -type f -name '*Test*.csproj' | while read proj; do
            echo "Testing $proj"
            dotnet test "$proj" --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory "./TestResults"
          done

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Reports (HTML, TextSummary, GitHub Markdown, CSV)
        run: |
          reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" -targetdir:"CoverageReport" -reporttypes:"Html;TextSummary;MarkdownSummaryGithub;CsvSummary"

      - name: "Debug - Output module lines from coverage summary"
        run: |
          echo "Module-level coverage lines in CoverageReport/Summary.txt:"
          grep -E '^[^ ].*[0-9]+%$' CoverageReport/Summary.txt | grep -v '^Summary'

      - name: Check Coverage Thresholds
        run: |
          if [ ! -f CoverageReport/Summary.txt ]; then
            echo "CoverageReport/Summary.txt not found! Coverage report was not generated."
            exit 1
          fi

          failed_projects=""
          # Exclude lines that start with a space or "Summary", only include module lines ending with %
          grep -E '^[^ ].*[0-9]+%$' CoverageReport/Summary.txt | grep -v '^Summary' | while read -r line; do
            # Extract module name (first field) and percent (last field, removing % and trimming whitespace)
            module=$(echo "$line" | awk '{print $1}')
            percent=$(echo "$line" | awk '{print $NF}' | tr -d '%' | xargs)
            if [[ "$percent" =~ ^[0-9]+$ ]] && (( percent < 80 )); then
              failed_projects="$failed_projects $module ($percent%)"
            fi
          done

          if [ -n "$failed_projects" ]; then
            echo "The following projects are below 80% line coverage:$failed_projects"
            exit 1
          fi

      - name: Upload coverage results and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results-and-report
          path: |
            TestResults/
            CoverageReport/
