name: PR Checks

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Download JetBrains dotCover CLI
        run: |
          DOTCOVER_VERSION="2025.2.0.1"
          wget -O dotcover.tar.gz "https://download.jetbrains.com/resharper/dotUltimate.${DOTCOVER_VERSION}/JetBrains.dotCover.CommandLineTools.${DOTCOVER_VERSION}.tar.gz"
          mkdir -p dotcover
          tar -xzf dotcover.tar.gz -C dotcover

      - name: Find all test projects
        id: detect
        shell: bash
        run: |
          # Find all .csproj files likely to be test projects
          find . -type f -name "*.csproj" | grep -Ei '/test[^/]*/|Test' | sort > test_projects.lst
          if [ ! -s test_projects.lst ]; then
            echo "❌ No test projects found!"
            exit 1
          fi

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Run all test projects with dotCover and check global coverage
        shell: bash
        run: |
          set -e
          COVERED_TOTAL=0
          TOTAL_STATEMENTS=0
          OVERALL_PASS=1
          idx=0

          while read PROJ; do
            idx=$((idx+1))
            PROJ_NAME=$(basename "$PROJ" .csproj)
            REPORT="dotCoverReport_${PROJ_NAME}.xml"
            # Try to infer the main/product assembly for filter (assume src/ProjectName/ProjectName.csproj exists)
            MAIN_PROJ=$(basename "$PROJ" .Tests)
            MAIN_DLL_FILTER="+:${MAIN_PROJ}*"
            echo "Running coverage for $PROJ_NAME ($PROJ) using filter $MAIN_DLL_FILTER..."

            dotnet dotcover/JetBrains.dotCover.Console.Runner.dll cover \
              --TargetExecutable=/usr/bin/dotnet \
              --TargetArguments="test $PROJ --no-build --configuration Release" \
              --ReportType=DetailedXML \
              --Output=$REPORT \
              --WorkingDir=$(pwd) \
              --Filters="$MAIN_DLL_FILTER"

            # Parse coverage numbers
            COV=$(xmllint --xpath 'string(/Root/@CoveredStatements)' $REPORT)
            TOT=$(xmllint --xpath 'string(/Root/@TotalStatements)' $REPORT)
            PCT=$(xmllint --xpath 'string(/Root/@CoveragePercent)' $REPORT | cut -d'.' -f1)

            echo "  Covered: $COV / Total: $TOT ($PCT%)"

            if [ -z "$COV" ] || [ -z "$TOT" ]; then
              echo "❌ Could not parse coverage for $PROJ_NAME"
              OVERALL_PASS=0
            fi

            # Enforce per-project threshold
            if [ "$PCT" -lt 80 ]; then
              echo "❌ Code coverage for $PROJ_NAME is below 80% ($PCT%)"
              OVERALL_PASS=0
            else
              echo "✅ Code coverage for $PROJ_NAME is at least 80% ($PCT%)"
            fi

            COVERED_TOTAL=$((COVERED_TOTAL+COV))
            TOTAL_STATEMENTS=$((TOTAL_STATEMENTS+TOT))
          done < test_projects.lst

          if [ "$TOTAL_STATEMENTS" -eq 0 ]; then
            echo "❌ No statements found in any project."
            exit 1
          fi

          GLOBAL_PCT=$((COVERED_TOTAL*100/TOTAL_STATEMENTS))
          echo "Total covered: $COVERED_TOTAL / $TOTAL_STATEMENTS ($GLOBAL_PCT%)"

          if [ "$GLOBAL_PCT" -lt 80 ]; then
            echo "❌ Combined code coverage is below 80% ($GLOBAL_PCT%)"
            exit 1
          fi

          if [ "$OVERALL_PASS" -eq 0 ]; then
            echo "❌ One or more test projects failed the 80% threshold."
            exit 1
          fi

          echo "✅ All test projects and global sum meet or exceed 80% coverage."

      - name: Upload all dotCover XML reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotCoverReports
          path: dotCoverReport_*.xml
