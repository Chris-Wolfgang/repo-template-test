name: PR Checks

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Download JetBrains dotCover CLI
        run: |
          DOTCOVER_VERSION="2025.2.0.1"
          wget -O dotcover.tar.gz "https://download.jetbrains.com/resharper/dotUltimate.${DOTCOVER_VERSION}/JetBrains.dotCover.CommandLineTools.${DOTCOVER_VERSION}.tar.gz"
          mkdir -p dotcover
          tar -xzf dotcover.tar.gz -C dotcover

      - name: Find all test projects (under /tests) and all src projects, and build dotCover filters
        id: detect
        shell: bash
        run: |
          echo "=== Listing all test projects under /tests ==="
          find ./tests -type f -name "*.csproj" | sort > test_projects.lst
          cat test_projects.lst
          if [ ! -s test_projects.lst ]; then
            echo "❌ No test projects found in /tests!"
            exit 1
          fi

          echo "=== Listing all production projects under /src ==="
          find ./src -type f -name "*.csproj" | sort > src_projects.lst
          cat src_projects.lst
          if [ ! -s src_projects.lst ]; then
            echo "❌ No production projects found in /src!"
            exit 1
          fi

          # Build dotCover filters for all src projects
          FILTERS=$(cat src_projects.lst | xargs -n1 basename | sed 's/.csproj$//' | awk '{printf "+:%s*;", $1}' | sed 's/;$//')
          echo "Filters string: $FILTERS"
          echo "filters=$FILTERS" >> $GITHUB_OUTPUT

          # Space-separated list of test projects
          TEST_LIST=$(cat test_projects.lst | xargs)
          echo "test_projects_list=$TEST_LIST" >> $GITHUB_OUTPUT

          # Space-separated list of src project names (assemblies)
          SRC_NAMES=$(cat src_projects.lst | xargs -n1 basename | sed 's/.csproj$//' | xargs)
          echo "src_names=$SRC_NAMES" >> $GITHUB_OUTPUT

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Run all test projects with dotCover (single session)
        shell: bash
        run: |
          set -e
          FILTERS="${{ steps.detect.outputs.filters }}"
          TEST_PROJECTS="${{ steps.detect.outputs.test_projects_list }}"
          echo "=== dotCover filters in use: $FILTERS"
          echo "=== Running tests for all projects: $TEST_PROJECTS"
          dotnet dotcover/JetBrains.dotCover.Console.Runner.dll cover \
            --TargetExecutable=/usr/bin/dotnet \
            --TargetArguments="test $TEST_PROJECTS --no-build --configuration Release" \
            --ReportType=DetailedXML \
            --Output=dotCoverReport.xml \
            --WorkingDir=$(pwd) \
            --Filters="$FILTERS"
          echo "=== First 40 lines of dotCoverReport.xml ==="
          head -40 dotCoverReport.xml

      - name: Check code coverage for each production project (fail if any <80%)
        shell: bash
        run: |
          SRC_NAMES="${{ steps.detect.outputs.src_names }}"
          REPORT=dotCoverReport.xml

          FAIL=0
          echo "=== Per-project coverage check ==="
          for NAME in $SRC_NAMES; do
            # Find the Assembly node for this project and extract the CoveragePercent attribute
            PCT=$(xmllint --xpath "string(//Assembly[@name='$NAME']/@CoveragePercent)" "$REPORT" | cut -d'.' -f1)
            echo "  Project: $NAME  Coverage: ${PCT:-N/A}%"
            if [ -z "$PCT" ]; then
              echo "❌ Could not find coverage for $NAME in report"
              FAIL=1
            elif [ "$PCT" -lt 80 ]; then
              echo "❌ Coverage for $NAME is below 80% ($PCT%)"
              FAIL=1
            else
              echo "✅ Coverage for $NAME is at least 80% ($PCT%)"
            fi
          done

          if [ "$FAIL" -ne 0 ]; then
            echo "❌ One or more production projects are below 80% code coverage."
            exit 1
          fi

          echo "✅ All production projects in /src are at least 80% covered."

      - name: Upload dotCover XML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotCoverReport.xml
          path: dotCoverReport.xml
